// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package response

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse(in *jlexer.Lexer, out *UserOrdersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "openOrders":
			if in.IsNull() {
				in.Skip()
				out.OpenOrders = nil
			} else {
				in.Delim('[')
				if out.OpenOrders == nil {
					if !in.IsDelim(']') {
						out.OpenOrders = make([]*AccountingOrder, 0, 8)
					} else {
						out.OpenOrders = []*AccountingOrder{}
					}
				} else {
					out.OpenOrders = (out.OpenOrders)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *AccountingOrder
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(AccountingOrder)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.OpenOrders = append(out.OpenOrders, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse(out *jwriter.Writer, in UserOrdersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"openOrders\":"
		out.RawString(prefix)
		if in.OpenOrders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.OpenOrders {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserOrdersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOrdersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOrdersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOrdersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse(l, v)
}
func easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse1(in *jlexer.Lexer, out *Deal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = string(in.String())
		case "orderId":
			out.OrderID = int64(in.Int64())
		case "pair":
			out.Pair = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "sellVolume":
			out.SellVolume = string(in.String())
		case "buyVolume":
			out.BuyVolume = string(in.String())
		case "feeQuoted":
			out.FeeQuoted = string(in.String())
		case "feeExt":
			out.FeeExt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse1(out *jwriter.Writer, in Deal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	{
		const prefix string = ",\"pair\":"
		out.RawString(prefix)
		out.String(string(in.Pair))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"sellVolume\":"
		out.RawString(prefix)
		out.String(string(in.SellVolume))
	}
	{
		const prefix string = ",\"buyVolume\":"
		out.RawString(prefix)
		out.String(string(in.BuyVolume))
	}
	{
		const prefix string = ",\"feeQuoted\":"
		out.RawString(prefix)
		out.String(string(in.FeeQuoted))
	}
	{
		const prefix string = ",\"feeExt\":"
		out.RawString(prefix)
		out.String(string(in.FeeExt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Deal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Deal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Deal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Deal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse1(l, v)
}
func easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse2(in *jlexer.Lexer, out *CreatedOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "order_id":
			out.OrderID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse2(out *jwriter.Writer, in CreatedOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"order_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreatedOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreatedOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreatedOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreatedOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse2(l, v)
}
func easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse3(in *jlexer.Lexer, out *BookResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "bids":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([]*Order, 0, 8)
					} else {
						out.Bids = []*Order{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Order
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Order)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Bids = append(out.Bids, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "asks":
			if in.IsNull() {
				in.Skip()
				out.Asks = nil
			} else {
				in.Delim('[')
				if out.Asks == nil {
					if !in.IsDelim(']') {
						out.Asks = make([]*Order, 0, 8)
					} else {
						out.Asks = []*Order{}
					}
				} else {
					out.Asks = (out.Asks)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Order
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Order)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Asks = append(out.Asks, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastPrice":
			easyjson67646b7bDecode(in, &out.LastPrice)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse3(out *jwriter.Writer, in BookResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"bids\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Bids {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"asks\":"
		out.RawString(prefix)
		if in.Asks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Asks {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastPrice\":"
		out.RawString(prefix)
		easyjson67646b7bEncode(out, in.LastPrice)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BookResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BookResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BookResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BookResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse3(l, v)
}
func easyjson67646b7bDecode(in *jlexer.Lexer, out *struct {
	Price string `json:"price"`
	Type  int    `json:"type"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = string(in.String())
		case "type":
			out.Type = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson67646b7bEncode(out *jwriter.Writer, in struct {
	Price string `json:"price"`
	Type  int    `json:"type"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}
func easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse4(in *jlexer.Lexer, out *AccountingUpdates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "clientEnvironment":
			easyjson67646b7bDecode1(in, &out.ClientEnvironment)
		case "balance":
			if in.IsNull() {
				in.Skip()
				out.Balance = nil
			} else {
				in.Delim('[')
				if out.Balance == nil {
					if !in.IsDelim(']') {
						out.Balance = make([]*Balance, 0, 8)
					} else {
						out.Balance = []*Balance{}
					}
				} else {
					out.Balance = (out.Balance)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *Balance
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(Balance)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Balance = append(out.Balance, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "orders":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]*AccountingOrder, 0, 8)
					} else {
						out.Orders = []*AccountingOrder{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *AccountingOrder
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(AccountingOrder)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.Orders = append(out.Orders, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deals":
			if in.IsNull() {
				in.Skip()
				out.Deals = nil
			} else {
				in.Delim('[')
				if out.Deals == nil {
					if !in.IsDelim(']') {
						out.Deals = make([]*Deal, 0, 8)
					} else {
						out.Deals = []*Deal{}
					}
				} else {
					out.Deals = (out.Deals)[:0]
				}
				for !in.IsDelim(']') {
					var v12 *Deal
					if in.IsNull() {
						in.Skip()
						v12 = nil
					} else {
						if v12 == nil {
							v12 = new(Deal)
						}
						(*v12).UnmarshalEasyJSON(in)
					}
					out.Deals = append(out.Deals, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse4(out *jwriter.Writer, in AccountingUpdates) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"clientEnvironment\":"
		out.RawString(prefix)
		easyjson67646b7bEncode1(out, in.ClientEnvironment)
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		if in.Balance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Balance {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					(*v14).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"orders\":"
		out.RawString(prefix)
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Orders {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					(*v16).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"deals\":"
		out.RawString(prefix)
		if in.Deals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Deals {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountingUpdates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountingUpdates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountingUpdates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountingUpdates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse4(l, v)
}
func easyjson67646b7bDecode1(in *jlexer.Lexer, out *struct {
	FavoritePairs    []string `json:"favoritePairs"`
	FavoriteCurrency string   `json:"favoriteCurrency"`
	TariffType       int      `json:"tariffType"`
	AllowSpecialFee  bool     `json:"allowSpecialFee"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "favoritePairs":
			if in.IsNull() {
				in.Skip()
				out.FavoritePairs = nil
			} else {
				in.Delim('[')
				if out.FavoritePairs == nil {
					if !in.IsDelim(']') {
						out.FavoritePairs = make([]string, 0, 4)
					} else {
						out.FavoritePairs = []string{}
					}
				} else {
					out.FavoritePairs = (out.FavoritePairs)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.FavoritePairs = append(out.FavoritePairs, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "favoriteCurrency":
			out.FavoriteCurrency = string(in.String())
		case "tariffType":
			out.TariffType = int(in.Int())
		case "allowSpecialFee":
			out.AllowSpecialFee = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson67646b7bEncode1(out *jwriter.Writer, in struct {
	FavoritePairs    []string `json:"favoritePairs"`
	FavoriteCurrency string   `json:"favoriteCurrency"`
	TariffType       int      `json:"tariffType"`
	AllowSpecialFee  bool     `json:"allowSpecialFee"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"favoritePairs\":"
		out.RawString(prefix[1:])
		if in.FavoritePairs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.FavoritePairs {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"favoriteCurrency\":"
		out.RawString(prefix)
		out.String(string(in.FavoriteCurrency))
	}
	{
		const prefix string = ",\"tariffType\":"
		out.RawString(prefix)
		out.Int(int(in.TariffType))
	}
	{
		const prefix string = ",\"allowSpecialFee\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowSpecialFee))
	}
	out.RawByte('}')
}
func easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse5(in *jlexer.Lexer, out *AccountingOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "tradeTimestamp":
			out.TradeTimestamp = string(in.String())
		case "createdTimestamp":
			out.CreatedTimestamp = string(in.String())
		case "state":
			out.State = int(in.Int())
		case "modifier":
			out.Modifier = int(in.Int())
		case "pair":
			out.Pair = string(in.String())
		case "tradeIntent":
			out.TradeIntent = int(in.Int())
		case "orderedVolume":
			out.OrderedVolume = string(in.String())
		case "limitPrice":
			out.LimitPrice = string(in.String())
		case "totalSellVolume":
			out.TotalSellVolume = string(in.String())
		case "totalBuyVolume":
			out.TotalBuyVolume = string(in.String())
		case "totalFeeQuoted":
			out.TotalFeeQuoted = string(in.String())
		case "totalFeeExt":
			out.TotalFeeExt = string(in.String())
		case "activated":
			out.Activated = string(in.String())
		case "tpActivateLevel":
			out.TpActivateLevel = string(in.String())
		case "trailDistance":
			out.TrailDistance = string(in.String())
		case "tp_submit_level":
			out.TpSubmitLevel = string(in.String())
		case "tpLimitPrice":
			out.TpLimitPrice = string(in.String())
		case "slSubmitLevel":
			out.SlSubmitLevel = string(in.String())
		case "slLimitPrice":
			out.SlLimitPrice = string(in.String())
		case "stopTimestamp":
			out.StopTimestamp = string(in.String())
		case "triggeredSide":
			out.TriggeredSide = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse5(out *jwriter.Writer, in AccountingOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"tradeTimestamp\":"
		out.RawString(prefix)
		out.String(string(in.TradeTimestamp))
	}
	{
		const prefix string = ",\"createdTimestamp\":"
		out.RawString(prefix)
		out.String(string(in.CreatedTimestamp))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.Int(int(in.Modifier))
	}
	{
		const prefix string = ",\"pair\":"
		out.RawString(prefix)
		out.String(string(in.Pair))
	}
	{
		const prefix string = ",\"tradeIntent\":"
		out.RawString(prefix)
		out.Int(int(in.TradeIntent))
	}
	{
		const prefix string = ",\"orderedVolume\":"
		out.RawString(prefix)
		out.String(string(in.OrderedVolume))
	}
	{
		const prefix string = ",\"limitPrice\":"
		out.RawString(prefix)
		out.String(string(in.LimitPrice))
	}
	{
		const prefix string = ",\"totalSellVolume\":"
		out.RawString(prefix)
		out.String(string(in.TotalSellVolume))
	}
	{
		const prefix string = ",\"totalBuyVolume\":"
		out.RawString(prefix)
		out.String(string(in.TotalBuyVolume))
	}
	{
		const prefix string = ",\"totalFeeQuoted\":"
		out.RawString(prefix)
		out.String(string(in.TotalFeeQuoted))
	}
	{
		const prefix string = ",\"totalFeeExt\":"
		out.RawString(prefix)
		out.String(string(in.TotalFeeExt))
	}
	{
		const prefix string = ",\"activated\":"
		out.RawString(prefix)
		out.String(string(in.Activated))
	}
	{
		const prefix string = ",\"tpActivateLevel\":"
		out.RawString(prefix)
		out.String(string(in.TpActivateLevel))
	}
	{
		const prefix string = ",\"trailDistance\":"
		out.RawString(prefix)
		out.String(string(in.TrailDistance))
	}
	{
		const prefix string = ",\"tp_submit_level\":"
		out.RawString(prefix)
		out.String(string(in.TpSubmitLevel))
	}
	{
		const prefix string = ",\"tpLimitPrice\":"
		out.RawString(prefix)
		out.String(string(in.TpLimitPrice))
	}
	{
		const prefix string = ",\"slSubmitLevel\":"
		out.RawString(prefix)
		out.String(string(in.SlSubmitLevel))
	}
	{
		const prefix string = ",\"slLimitPrice\":"
		out.RawString(prefix)
		out.String(string(in.SlLimitPrice))
	}
	{
		const prefix string = ",\"stopTimestamp\":"
		out.RawString(prefix)
		out.String(string(in.StopTimestamp))
	}
	{
		const prefix string = ",\"triggeredSide\":"
		out.RawString(prefix)
		out.String(string(in.TriggeredSide))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountingOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountingOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson67646b7bEncodeGithubComSoulgardenKickexBotResponse5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountingOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountingOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson67646b7bDecodeGithubComSoulgardenKickexBotResponse5(l, v)
}
