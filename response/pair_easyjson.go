// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package response

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7d908798DecodeGithubComSoulgardenKickexBotResponse(in *jlexer.Lexer, out *Pairs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "pairs":
			if in.IsNull() {
				in.Skip()
				out.Pairs = nil
			} else {
				in.Delim('[')
				if out.Pairs == nil {
					if !in.IsDelim(']') {
						out.Pairs = make([]*Pair, 0, 8)
					} else {
						out.Pairs = []*Pair{}
					}
				} else {
					out.Pairs = (out.Pairs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Pair
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Pair)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Pairs = append(out.Pairs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7d908798EncodeGithubComSoulgardenKickexBotResponse(out *jwriter.Writer, in Pairs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"pairs\":"
		out.RawString(prefix)
		if in.Pairs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Pairs {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pairs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7d908798EncodeGithubComSoulgardenKickexBotResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pairs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7d908798EncodeGithubComSoulgardenKickexBotResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pairs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7d908798DecodeGithubComSoulgardenKickexBotResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pairs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7d908798DecodeGithubComSoulgardenKickexBotResponse(l, v)
}
func easyjson7d908798DecodeGithubComSoulgardenKickexBotResponse1(in *jlexer.Lexer, out *Pair) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "baseCurrency":
			out.BaseCurrency = string(in.String())
		case "quoteCurrency":
			out.QuoteCurrency = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "price24hChange":
			out.Price24hChange = string(in.String())
		case "volume24hChange":
			out.Volume24hChange = string(in.String())
		case "amount_24_h_change":
			out.Amount24hChange = string(in.String())
		case "lowPrice24h":
			out.LowPrice24h = string(in.String())
		case "highPrice24h":
			out.HighPrice24h = string(in.String())
		case "priceScale":
			out.PriceScale = int(in.Int())
		case "quantityScale":
			out.QuantityScale = int(in.Int())
		case "volumeScale":
			out.VolumeScale = int(in.Int())
		case "minQuantity":
			out.MinQuantity = string(in.String())
		case "minVolume":
			out.MinVolume = string(in.String())
		case "state":
			out.State = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7d908798EncodeGithubComSoulgardenKickexBotResponse1(out *jwriter.Writer, in Pair) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"baseCurrency\":"
		out.RawString(prefix[1:])
		out.String(string(in.BaseCurrency))
	}
	{
		const prefix string = ",\"quoteCurrency\":"
		out.RawString(prefix)
		out.String(string(in.QuoteCurrency))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"price24hChange\":"
		out.RawString(prefix)
		out.String(string(in.Price24hChange))
	}
	{
		const prefix string = ",\"volume24hChange\":"
		out.RawString(prefix)
		out.String(string(in.Volume24hChange))
	}
	{
		const prefix string = ",\"amount_24_h_change\":"
		out.RawString(prefix)
		out.String(string(in.Amount24hChange))
	}
	{
		const prefix string = ",\"lowPrice24h\":"
		out.RawString(prefix)
		out.String(string(in.LowPrice24h))
	}
	{
		const prefix string = ",\"highPrice24h\":"
		out.RawString(prefix)
		out.String(string(in.HighPrice24h))
	}
	{
		const prefix string = ",\"priceScale\":"
		out.RawString(prefix)
		out.Int(int(in.PriceScale))
	}
	{
		const prefix string = ",\"quantityScale\":"
		out.RawString(prefix)
		out.Int(int(in.QuantityScale))
	}
	{
		const prefix string = ",\"volumeScale\":"
		out.RawString(prefix)
		out.Int(int(in.VolumeScale))
	}
	{
		const prefix string = ",\"minQuantity\":"
		out.RawString(prefix)
		out.String(string(in.MinQuantity))
	}
	{
		const prefix string = ",\"minVolume\":"
		out.RawString(prefix)
		out.String(string(in.MinVolume))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pair) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7d908798EncodeGithubComSoulgardenKickexBotResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pair) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7d908798EncodeGithubComSoulgardenKickexBotResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pair) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7d908798DecodeGithubComSoulgardenKickexBotResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pair) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7d908798DecodeGithubComSoulgardenKickexBotResponse1(l, v)
}
