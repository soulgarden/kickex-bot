// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package storage

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	broker "github.com/soulgarden/kickex-bot/broker"
	response "github.com/soulgarden/kickex-bot/response"
	buy "github.com/soulgarden/kickex-bot/storage/buy"
	spread "github.com/soulgarden/kickex-bot/storage/spread"
	big "math/big"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorage(in *jlexer.Lexer, out *DumpStorage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_orders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.UserOrders = make(map[int64]*Order)
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v1 *Order
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Order)
						}
						easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorage1(in, v1)
					}
					(out.UserOrders)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "deals":
			if in.IsNull() {
				in.Skip()
				out.Deals = nil
			} else {
				in.Delim('[')
				if out.Deals == nil {
					if !in.IsDelim(']') {
						out.Deals = make([]*response.Deal, 0, 8)
					} else {
						out.Deals = []*response.Deal{}
					}
				} else {
					out.Deals = (out.Deals)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *response.Deal
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(response.Deal)
						}
						easyjsonF185c21aDecodeGithubComSoulgardenKickexBotResponse(in, v2)
					}
					out.Deals = append(out.Deals, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "order_books":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.OrderBooks = make(map[string]map[string]*Book)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 map[string]*Book
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v3 = make(map[string]*Book)
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v4 *Book
							if in.IsNull() {
								in.Skip()
								v4 = nil
							} else {
								if v4 == nil {
									v4 = new(Book)
								}
								easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorage2(in, v4)
							}
							(v3)[key] = v4
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.OrderBooks)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorage(out *jwriter.Writer, in DumpStorage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_orders\":"
		out.RawString(prefix[1:])
		if in.UserOrders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.UserOrders {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v5Name))
				out.RawByte(':')
				if v5Value == nil {
					out.RawString("null")
				} else {
					easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorage1(out, *v5Value)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"deals\":"
		out.RawString(prefix)
		if in.Deals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Deals {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					easyjsonF185c21aEncodeGithubComSoulgardenKickexBotResponse(out, *v7)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"order_books\":"
		out.RawString(prefix)
		if in.OrderBooks == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.OrderBooks {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if v8Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v9First := true
					for v9Name, v9Value := range v8Value {
						if v9First {
							v9First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v9Name))
						out.RawByte(':')
						if v9Value == nil {
							out.RawString("null")
						} else {
							easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorage2(out, *v9Value)
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DumpStorage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DumpStorage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DumpStorage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DumpStorage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorage(l, v)
}
func easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorage2(in *jlexer.Lexer, out *Book) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LastPrice":
			out.LastPrice = string(in.String())
		case "Spread":
			if in.IsNull() {
				in.Skip()
				out.Spread = nil
			} else {
				if out.Spread == nil {
					out.Spread = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.Spread).UnmarshalText(data))
				}
			}
		case "spread_sessions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SpreadSessions = make(map[string]*spread.Session)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 *spread.Session
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(spread.Session)
						}
						easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorageSpread(in, v10)
					}
					(out.SpreadSessions)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "buy_sessions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.BuySessions = make(map[string]*buy.Session)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 *buy.Session
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(buy.Session)
						}
						easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorageBuy(in, v11)
					}
					(out.BuySessions)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "SpreadActiveSessionID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.SpreadActiveSessionID).UnmarshalText(data))
			}
		case "BuyActiveSessionID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.BuyActiveSessionID).UnmarshalText(data))
			}
		case "profit":
			if in.IsNull() {
				in.Skip()
				out.Profit = nil
			} else {
				if out.Profit == nil {
					out.Profit = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.Profit).UnmarshalText(data))
				}
			}
		case "bought_volume":
			if in.IsNull() {
				in.Skip()
				out.BoughtVolume = nil
			} else {
				if out.BoughtVolume == nil {
					out.BoughtVolume = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.BoughtVolume).UnmarshalText(data))
				}
			}
		case "bought_cost":
			if in.IsNull() {
				in.Skip()
				out.BoughtCost = nil
			} else {
				if out.BoughtCost == nil {
					out.BoughtCost = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.BoughtCost).UnmarshalText(data))
				}
			}
		case "OrderBookEventBroker":
			if in.IsNull() {
				in.Skip()
				out.OrderBookEventBroker = nil
			} else {
				if out.OrderBookEventBroker == nil {
					out.OrderBookEventBroker = new(broker.Broker)
				}
				easyjsonF185c21aDecodeGithubComSoulgardenKickexBotBroker(in, out.OrderBookEventBroker)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorage2(out *jwriter.Writer, in Book) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LastPrice\":"
		out.RawString(prefix[1:])
		out.String(string(in.LastPrice))
	}
	{
		const prefix string = ",\"Spread\":"
		out.RawString(prefix)
		if in.Spread == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Spread).MarshalText())
		}
	}
	{
		const prefix string = ",\"spread_sessions\":"
		out.RawString(prefix)
		if in.SpreadSessions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.SpreadSessions {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				if v12Value == nil {
					out.RawString("null")
				} else {
					easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorageSpread(out, *v12Value)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"buy_sessions\":"
		out.RawString(prefix)
		if in.BuySessions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.BuySessions {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if v13Value == nil {
					out.RawString("null")
				} else {
					easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorageBuy(out, *v13Value)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"SpreadActiveSessionID\":"
		out.RawString(prefix)
		out.RawText((in.SpreadActiveSessionID).MarshalText())
	}
	{
		const prefix string = ",\"BuyActiveSessionID\":"
		out.RawString(prefix)
		out.RawText((in.BuyActiveSessionID).MarshalText())
	}
	{
		const prefix string = ",\"profit\":"
		out.RawString(prefix)
		if in.Profit == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Profit).MarshalText())
		}
	}
	{
		const prefix string = ",\"bought_volume\":"
		out.RawString(prefix)
		if in.BoughtVolume == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.BoughtVolume).MarshalText())
		}
	}
	{
		const prefix string = ",\"bought_cost\":"
		out.RawString(prefix)
		if in.BoughtCost == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.BoughtCost).MarshalText())
		}
	}
	{
		const prefix string = ",\"OrderBookEventBroker\":"
		out.RawString(prefix)
		if in.OrderBookEventBroker == nil {
			out.RawString("null")
		} else {
			easyjsonF185c21aEncodeGithubComSoulgardenKickexBotBroker(out, *in.OrderBookEventBroker)
		}
	}
	out.RawByte('}')
}
func easyjsonF185c21aDecodeGithubComSoulgardenKickexBotBroker(in *jlexer.Lexer, out *broker.Broker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF185c21aEncodeGithubComSoulgardenKickexBotBroker(out *jwriter.Writer, in broker.Broker) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorageBuy(in *jlexer.Lexer, out *buy.Session) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "active_buy_ext_order_id":
			out.ActiveBuyExtOrderID = string(in.String())
		case "prev_buy_order_id":
			out.PrevBuyOrderID = int64(in.Int64())
		case "active_buy_order_id":
			out.ActiveBuyOrderID = int64(in.Int64())
		case "completed_buy_orders":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CompletedBuyOrders).UnmarshalJSON(data))
			}
		case "buy_total":
			if in.IsNull() {
				in.Skip()
				out.BuyTotal = nil
			} else {
				if out.BuyTotal == nil {
					out.BuyTotal = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.BuyTotal).UnmarshalText(data))
				}
			}
		case "buy_orders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.BuyOrders = make(map[int64]int64)
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v14 int64
					v14 = int64(in.Int64())
					(out.BuyOrders)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "is_need_to_create_buy_order":
			out.IsNeedToCreateBuyOrder = bool(in.Bool())
		case "is_done":
			out.IsDone = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorageBuy(out *jwriter.Writer, in buy.Session) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"active_buy_ext_order_id\":"
		out.RawString(prefix)
		out.String(string(in.ActiveBuyExtOrderID))
	}
	{
		const prefix string = ",\"prev_buy_order_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.PrevBuyOrderID))
	}
	{
		const prefix string = ",\"active_buy_order_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ActiveBuyOrderID))
	}
	{
		const prefix string = ",\"completed_buy_orders\":"
		out.RawString(prefix)
		out.Raw((in.CompletedBuyOrders).MarshalJSON())
	}
	{
		const prefix string = ",\"buy_total\":"
		out.RawString(prefix)
		if in.BuyTotal == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.BuyTotal).MarshalText())
		}
	}
	{
		const prefix string = ",\"buy_orders\":"
		out.RawString(prefix)
		if in.BuyOrders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.BuyOrders {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v15Name))
				out.RawByte(':')
				out.Int64(int64(v15Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"is_need_to_create_buy_order\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNeedToCreateBuyOrder))
	}
	{
		const prefix string = ",\"is_done\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDone))
	}
	out.RawByte('}')
}
func easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorageSpread(in *jlexer.Lexer, out *spread.Session) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "active_buy_ext_order_id":
			out.ActiveBuyExtOrderID = string(in.String())
		case "active_sell_ext_order_id":
			out.ActiveSellExtOrderID = string(in.String())
		case "prev_buy_order_id":
			out.PrevBuyOrderID = int64(in.Int64())
		case "active_buy_order_id":
			out.ActiveBuyOrderID = int64(in.Int64())
		case "active_sell_order_id":
			out.ActiveSellOrderID = int64(in.Int64())
		case "prev_sell_order_id":
			out.PrevSellOrderID = int64(in.Int64())
		case "completed_buy_orders":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CompletedBuyOrders).UnmarshalJSON(data))
			}
		case "completed_sell_orders":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CompletedSellOrders).UnmarshalJSON(data))
			}
		case "buy_total":
			if in.IsNull() {
				in.Skip()
				out.BuyTotal = nil
			} else {
				if out.BuyTotal == nil {
					out.BuyTotal = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.BuyTotal).UnmarshalText(data))
				}
			}
		case "sell_total":
			if in.IsNull() {
				in.Skip()
				out.SellVolume = nil
			} else {
				if out.SellVolume == nil {
					out.SellVolume = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.SellVolume).UnmarshalText(data))
				}
			}
		case "buy_orders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.BuyOrders = make(map[int64]int64)
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v16 int64
					v16 = int64(in.Int64())
					(out.BuyOrders)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "sell_orders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SellOrders = make(map[int64]int64)
				for !in.IsDelim('}') {
					key := int64(in.Int64Str())
					in.WantColon()
					var v17 int64
					v17 = int64(in.Int64())
					(out.SellOrders)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		case "is_need_to_create_buy_order":
			out.IsNeedToCreateBuyOrder = bool(in.Bool())
		case "is_need_to_create_sell_order":
			out.IsNeedToCreateSellOrder = bool(in.Bool())
		case "is_done":
			out.IsDone = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorageSpread(out *jwriter.Writer, in spread.Session) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"active_buy_ext_order_id\":"
		out.RawString(prefix)
		out.String(string(in.ActiveBuyExtOrderID))
	}
	{
		const prefix string = ",\"active_sell_ext_order_id\":"
		out.RawString(prefix)
		out.String(string(in.ActiveSellExtOrderID))
	}
	{
		const prefix string = ",\"prev_buy_order_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.PrevBuyOrderID))
	}
	{
		const prefix string = ",\"active_buy_order_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ActiveBuyOrderID))
	}
	{
		const prefix string = ",\"active_sell_order_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ActiveSellOrderID))
	}
	{
		const prefix string = ",\"prev_sell_order_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.PrevSellOrderID))
	}
	{
		const prefix string = ",\"completed_buy_orders\":"
		out.RawString(prefix)
		out.Raw((in.CompletedBuyOrders).MarshalJSON())
	}
	{
		const prefix string = ",\"completed_sell_orders\":"
		out.RawString(prefix)
		out.Raw((in.CompletedSellOrders).MarshalJSON())
	}
	{
		const prefix string = ",\"buy_total\":"
		out.RawString(prefix)
		if in.BuyTotal == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.BuyTotal).MarshalText())
		}
	}
	{
		const prefix string = ",\"sell_total\":"
		out.RawString(prefix)
		if in.SellVolume == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.SellVolume).MarshalText())
		}
	}
	{
		const prefix string = ",\"buy_orders\":"
		out.RawString(prefix)
		if in.BuyOrders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.BuyOrders {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v18Name))
				out.RawByte(':')
				out.Int64(int64(v18Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"sell_orders\":"
		out.RawString(prefix)
		if in.SellOrders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.SellOrders {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.Int64Str(int64(v19Name))
				out.RawByte(':')
				out.Int64(int64(v19Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"is_need_to_create_buy_order\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNeedToCreateBuyOrder))
	}
	{
		const prefix string = ",\"is_need_to_create_sell_order\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNeedToCreateSellOrder))
	}
	{
		const prefix string = ",\"is_done\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDone))
	}
	out.RawByte('}')
}
func easyjsonF185c21aDecodeGithubComSoulgardenKickexBotResponse(in *jlexer.Lexer, out *response.Deal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = string(in.String())
		case "orderId":
			out.OrderID = int64(in.Int64())
		case "pair":
			out.Pair = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "sellVolume":
			out.SellVolume = string(in.String())
		case "buyVolume":
			out.BuyVolume = string(in.String())
		case "feeQuoted":
			out.FeeQuoted = string(in.String())
		case "feeExt":
			out.FeeExt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF185c21aEncodeGithubComSoulgardenKickexBotResponse(out *jwriter.Writer, in response.Deal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	{
		const prefix string = ",\"pair\":"
		out.RawString(prefix)
		out.String(string(in.Pair))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"sellVolume\":"
		out.RawString(prefix)
		out.String(string(in.SellVolume))
	}
	{
		const prefix string = ",\"buyVolume\":"
		out.RawString(prefix)
		out.String(string(in.BuyVolume))
	}
	{
		const prefix string = ",\"feeQuoted\":"
		out.RawString(prefix)
		out.String(string(in.FeeQuoted))
	}
	{
		const prefix string = ",\"feeExt\":"
		out.RawString(prefix)
		out.String(string(in.FeeExt))
	}
	out.RawByte('}')
}
func easyjsonF185c21aDecodeGithubComSoulgardenKickexBotStorage1(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int64(in.Int64())
		case "TradeTimestamp":
			out.TradeTimestamp = string(in.String())
		case "CreatedTimestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedTimestamp).UnmarshalJSON(data))
			}
		case "State":
			out.State = int(in.Int())
		case "Modifier":
			out.Modifier = int(in.Int())
		case "Pair":
			out.Pair = string(in.String())
		case "TradeIntent":
			out.TradeIntent = int(in.Int())
		case "OrderedVolume":
			if in.IsNull() {
				in.Skip()
				out.OrderedVolume = nil
			} else {
				if out.OrderedVolume == nil {
					out.OrderedVolume = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.OrderedVolume).UnmarshalText(data))
				}
			}
		case "LimitPrice":
			if in.IsNull() {
				in.Skip()
				out.LimitPrice = nil
			} else {
				if out.LimitPrice == nil {
					out.LimitPrice = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.LimitPrice).UnmarshalText(data))
				}
			}
		case "TotalSellVolume":
			if in.IsNull() {
				in.Skip()
				out.TotalSellVolume = nil
			} else {
				if out.TotalSellVolume == nil {
					out.TotalSellVolume = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.TotalSellVolume).UnmarshalText(data))
				}
			}
		case "TotalBuyVolume":
			if in.IsNull() {
				in.Skip()
				out.TotalBuyVolume = nil
			} else {
				if out.TotalBuyVolume == nil {
					out.TotalBuyVolume = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.TotalBuyVolume).UnmarshalText(data))
				}
			}
		case "TotalFeeQuoted":
			if in.IsNull() {
				in.Skip()
				out.TotalFeeQuoted = nil
			} else {
				if out.TotalFeeQuoted == nil {
					out.TotalFeeQuoted = new(big.Float)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.TotalFeeQuoted).UnmarshalText(data))
				}
			}
		case "TotalFeeExt":
			out.TotalFeeExt = string(in.String())
		case "Activated":
			out.Activated = string(in.String())
		case "TpActivateLevel":
			out.TpActivateLevel = string(in.String())
		case "TrailDistance":
			out.TrailDistance = string(in.String())
		case "TpSubmitLevel":
			out.TpSubmitLevel = string(in.String())
		case "TpLimitPrice":
			out.TpLimitPrice = string(in.String())
		case "SlSubmitLevel":
			out.SlSubmitLevel = string(in.String())
		case "SlLimitPrice":
			out.SlLimitPrice = string(in.String())
		case "StopTimestamp":
			out.StopTimestamp = string(in.String())
		case "TriggeredSide":
			out.TriggeredSide = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF185c21aEncodeGithubComSoulgardenKickexBotStorage1(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"TradeTimestamp\":"
		out.RawString(prefix)
		out.String(string(in.TradeTimestamp))
	}
	{
		const prefix string = ",\"CreatedTimestamp\":"
		out.RawString(prefix)
		out.Raw((in.CreatedTimestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"Modifier\":"
		out.RawString(prefix)
		out.Int(int(in.Modifier))
	}
	{
		const prefix string = ",\"Pair\":"
		out.RawString(prefix)
		out.String(string(in.Pair))
	}
	{
		const prefix string = ",\"TradeIntent\":"
		out.RawString(prefix)
		out.Int(int(in.TradeIntent))
	}
	{
		const prefix string = ",\"OrderedVolume\":"
		out.RawString(prefix)
		if in.OrderedVolume == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.OrderedVolume).MarshalText())
		}
	}
	{
		const prefix string = ",\"LimitPrice\":"
		out.RawString(prefix)
		if in.LimitPrice == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.LimitPrice).MarshalText())
		}
	}
	{
		const prefix string = ",\"TotalSellVolume\":"
		out.RawString(prefix)
		if in.TotalSellVolume == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.TotalSellVolume).MarshalText())
		}
	}
	{
		const prefix string = ",\"TotalBuyVolume\":"
		out.RawString(prefix)
		if in.TotalBuyVolume == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.TotalBuyVolume).MarshalText())
		}
	}
	{
		const prefix string = ",\"TotalFeeQuoted\":"
		out.RawString(prefix)
		if in.TotalFeeQuoted == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.TotalFeeQuoted).MarshalText())
		}
	}
	{
		const prefix string = ",\"TotalFeeExt\":"
		out.RawString(prefix)
		out.String(string(in.TotalFeeExt))
	}
	{
		const prefix string = ",\"Activated\":"
		out.RawString(prefix)
		out.String(string(in.Activated))
	}
	{
		const prefix string = ",\"TpActivateLevel\":"
		out.RawString(prefix)
		out.String(string(in.TpActivateLevel))
	}
	{
		const prefix string = ",\"TrailDistance\":"
		out.RawString(prefix)
		out.String(string(in.TrailDistance))
	}
	{
		const prefix string = ",\"TpSubmitLevel\":"
		out.RawString(prefix)
		out.String(string(in.TpSubmitLevel))
	}
	{
		const prefix string = ",\"TpLimitPrice\":"
		out.RawString(prefix)
		out.String(string(in.TpLimitPrice))
	}
	{
		const prefix string = ",\"SlSubmitLevel\":"
		out.RawString(prefix)
		out.String(string(in.SlSubmitLevel))
	}
	{
		const prefix string = ",\"SlLimitPrice\":"
		out.RawString(prefix)
		out.String(string(in.SlLimitPrice))
	}
	{
		const prefix string = ",\"StopTimestamp\":"
		out.RawString(prefix)
		out.String(string(in.StopTimestamp))
	}
	{
		const prefix string = ",\"TriggeredSide\":"
		out.RawString(prefix)
		out.String(string(in.TriggeredSide))
	}
	out.RawByte('}')
}
